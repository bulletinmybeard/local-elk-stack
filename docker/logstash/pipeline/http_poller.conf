input {
    http_poller {
        urls => {
            first_endpoint => {
                method => "get"
                url => "http://host.docker.internal:1234/first_endpoint/?param=1&another-param=2"
                headers => {
                    Accept => "application/json"
                    "api-key" => "${SOME_HOST_API_KEY}"
                }
            }
            second_endpoint => {
                method => "post"
                url => "http://host.docker.internal:1234/second_endpoint/?param=1&another-param=2"
                headers => {
                    Accept => "application/json"
                    "api-key" => "${SOME_HOST_API_KEY}"
                }
            }
        }
        request_timeout => 60
        schedule => { every => "10s" }
        codec => "json"
        metadata_target => "http_poller_metadata"
    }
}

filter {
    mutate {
        add_tag => ["%{[http_poller_metadata][response_headers][content-type]}"]
        add_tag => ["%{[http_poller_metadata][name]}"]
        remove_tag => ["_grokparsefailure"]
        add_field => {"elastic_index_name" => "%{[http_poller_metadata][name]}-index"}
    }
    ruby {
        code => "event.set('debug_message_content_type', '%{[http_poller_metadata][response_headers][content-type]}')"
    }
    csv {
        autodetect_column_names => true
        target => "[document]"
    }
}

output {
    elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "%{elastic_index_name}"
    }
    stdout {
        codec => rubydebug { metadata => true }
    }
}
